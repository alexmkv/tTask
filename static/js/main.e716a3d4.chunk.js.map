{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["NewTask","props","useState","val","setVal","onAdd","value","onChange","ev","target","onKeyDown","e","key","onClick","Task","className","task","text","onDelete","a","get","Actions","onUpload","onDownload","gtasks","getTasks","App","undefined","tasks","setTasks","then","v","Array","isArray","ts","update","t","set","map","id","filter","tf","concat","replace","c","r","Math","random","toString","filename","pom","document","createElement","setAttribute","encodeURIComponent","createEvent","event","initEvent","dispatchEvent","click","download","JSON","stringify","input","type","onchange","file","files","reader","FileReader","readAsText","onload","readerEvent","parse","result","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iPAuBA,SAASA,EAAQC,GAAa,IAAD,EACPC,mBAAS,IADF,mBACtBC,EADsB,KACjBC,EADiB,KAErBC,EAAQ,WAAKJ,EAAMI,MAAMF,GAAMC,EAAO,KAC5C,OAAO,oCACP,2BAAOE,MAAOH,EAAKI,SAAU,SAACC,GAAD,OAAUJ,EAAOI,EAAGC,OAAOH,QAAQI,UAAW,SAACC,GAC/D,UAAVA,EAAEC,KAAoBP,OACzB,yBAAKQ,QAASR,GAAd,MAGF,SAASS,EAAKb,GACZ,OAAO,yBAAKc,UAAU,OAAM,6BAAMd,EAAMe,KAAKC,MAAW,yBAAKJ,QAASZ,EAAMiB,UAApB,M,4CAG1D,sBAAAC,EAAA,+EAESC,YAAI,UAFb,4C,sBAKA,SAASC,EAAQpB,GACf,OAAO,yBAAKc,UAAU,OAAM,yBAAKF,QAASZ,EAAMqB,UAApB,UAA0C,yBAAKT,QAASZ,EAAMsB,YAApB,aAGxE,IAAMC,E,0CAASC,GAiBf,IA6CeC,EA7CO,WAAO,IAAD,EACFxB,wBAASyB,GADP,mBACrBC,EADqB,KACdC,EADc,UAEbF,GAATC,GACFJ,EAAOM,MAAK,SAACC,GACNC,MAAMC,QAAQF,KAAIA,EAAI,IAC3BF,EAASE,MAGb,IAAMG,EAAMN,GAAS,GACfO,EAAS,SAACC,GACdC,YAAI,QAASD,GACbP,EAASO,IAuBX,OACE,yBAAKrB,UAAU,OAAf,QACO,oCACJmB,EAAGI,KAAI,SAACF,GAAD,OAAO,kBAACtB,EAAD,CAAMF,IAAKwB,EAAEG,GAAIvB,KAAMoB,EAAGlB,SAAU,WAAKiB,EAAOD,EAAGM,QAAO,SAAAC,GAAE,OAAIA,EAAGF,IAAMH,EAAEG,cAC1F,kBAACvC,EAAD,CAASK,MAAO,SAAC0B,GApFvB,IAAoBd,EAoFekB,EAAOD,EAAGQ,OAAO,EApFhCzB,EAoF4Cc,EAnFvD,CACLQ,GAbK,uCAAuCI,QAAQ,SAAS,SAASC,GACtE,IAAIC,EAAoB,GAAhBC,KAAKC,SAAgB,EAC7B,OAD0C,MAANH,EAAYC,EAAS,EAAJA,EAAU,GACtDG,SAAS,OAYlB/B,KAAMA,UAkFJ,kBAACI,EAAD,CAASE,WA1BI,YA5BnB,SAAkB0B,EAAiBhC,GACjC,IAAIiC,EAAMC,SAASC,cAAc,KAIjC,GAHAF,EAAIG,aAAa,OAAQ,iCAAmCC,mBAAmBrC,IAC/EiC,EAAIG,aAAa,WAAYJ,GAEzBE,SAASI,YAAa,CACtB,IAAIC,EAAQL,SAASI,YAAY,eACjCC,EAAMC,UAAU,SAAS,GAAM,GAC/BP,EAAIQ,cAAcF,QAGlBN,EAAIS,QAkBNC,CAAS,eAAgBC,KAAKC,UAAUlC,KAyBLN,SAvBtB,WACb,IAAIyC,EAAQZ,SAASC,cAAc,SACnCW,EAAMC,KAAO,OAEbD,EAAME,SAAW,SAACtD,GACf,IAAIuD,EAAOvD,EAAEF,OAAO0D,MAAM,GACtBC,EAAS,IAAIC,WACjBD,EAAOE,WAAWJ,GAClBE,EAAOG,OAAS,SAACC,GACfrC,EAAO0B,KAAKY,MAAMD,EAAY/D,OAAOiE,WAK1CX,EAAMJ,aChFUgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9B,SAAS+B,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvD,MAAK,SAAAwD,GACjCA,EAAaC,iB","file":"static/js/main.e716a3d4.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { get, set } from 'idb-keyval';\n\nfunction uuidv4() {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    var r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n    return v.toString(16);\n  });\n}\n\ninterface Task {\n  id: string;\n  text: string;\n}\n\nfunction createTask(text: string) {\n  return {\n    id: uuidv4(),\n    text: text\n  }\n}\n\nfunction NewTask(props: any) {\n  let [val, setVal] = useState('');\n  const onAdd = ()=>{props.onAdd(val); setVal('');}\n  return <>\n  <input value={val} onChange={(ev:any)=>setVal(ev.target.value)} onKeyDown={(e:any)=>{\n    (e.key === \"Enter\") && onAdd();}} />\n  <div onClick={onAdd}>+</div></>;\n}\n\nfunction Task(props: any) {\n  return <div className=\"row\"><div>{props.task.text}</div><div onClick={props.onDelete}>x</div></div>\n}\n\nasync function getTasks():Promise<Task[]> \n{\n  return get('tasks') as any;\n}\n\nfunction Actions(props:any) {\n  return <div className=\"row\"><div onClick={props.onUpload}>Upload</div><div onClick={props.onDownload}>Download</div></div>\n}\n\nconst gtasks = getTasks();\n\nfunction download(filename:string, text:string) {\n  var pom = document.createElement('a');\n  pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n  pom.setAttribute('download', filename);\n\n  if (document.createEvent) {\n      var event = document.createEvent('MouseEvents');\n      event.initEvent('click', true, true);\n      pom.dispatchEvent(event);\n  }\n  else {\n      pom.click();\n  }\n}\n\nconst App: React.FC = () => {\n  let [tasks, setTasks] = useState(undefined as (Task[]|undefined));\n  if (tasks == undefined) {\n    gtasks.then((v:any)=>{\n      if (!Array.isArray(v)) v = [];\n      setTasks(v);\n    })\n  }\n  const ts = (tasks || []) as Task[];\n  const update = (t: any) => {\n    set('tasks', t);\n    setTasks(t);\n  }\n  const onDownload=()=>{\n    download('content.json', JSON.stringify(tasks));\n  }\n  const onUpload=()=>{\n    var input = document.createElement('input');\n    input.type = 'file';\n    \n    input.onchange = (e:any) => { \n       var file = e.target.files[0]; \n       var reader = new FileReader();\n       reader.readAsText(file); // this is reading as data url\n       reader.onload = (readerEvent:any) => {\n         update(JSON.parse(readerEvent.target.result));\n       }\n    \n    }\n    \n    input.click();    \n\n  }\n  \n  return (\n    <div className=\"App\">\n      tTask<>\n      {ts.map((t) => <Task key={t.id} task={t} onDelete={()=>{update(ts.filter(tf => tf.id != t.id)) }} />)}</>\n      <NewTask onAdd={(v:any) => { update(ts.concat([createTask(v)]))}} />\n      <Actions onDownload={onDownload} onUpload={onUpload}/>\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}