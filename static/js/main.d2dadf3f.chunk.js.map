{"version":3,"sources":["App.tsx","dropbox.ts","serviceWorker.ts","index.tsx"],"names":["gTasks","utils","parseQueryString","str","ret","Object","create","trim","replace","split","forEach","param","parts","key","shift","val","length","join","undefined","decodeURIComponent","Array","isArray","push","CLIENT_ID","getAccessTokenFromUrl","window","location","hash","access_token","createTask","text","id","c","r","Math","random","toString","EditTask","props","inpRef","useRef","useEffect","current","focus","className","task","done","ref","value","onChange","ev","target","onKeyDown","e","ctrlKey","onDone","onNextOrCreate","onPrev","onNext","Task","onClick","onActivate","onDelete","a","get","Actions","onUpload","onDownload","DropboxCmp","useState","status","setStatus","href","Dropbox","clientId","getAuthenticationUrl","accessToken","filesUpload","contents","JSON","stringify","path","mode","then","response","filesDownload","fileBlob","txt","onGet","parse","gtasks","getTasks","App","tasks","setTasks","ts","activeTaskId","setActiveTaskId","v","update","t","set","move","up","idx","nt","concat","map","filter","tf","filename","pom","document","createElement","setAttribute","encodeURIComponent","createEvent","event","initEvent","dispatchEvent","click","download","input","type","onchange","file","files","reader","FileReader","readAsText","onload","readerEvent","result","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d2dadf3f.chunk.js","sourcesContent":["// implement: https://github.com/dropbox/dropbox-sdk-js/blob/master/examples/javascript/auth/index.html\n// split on several files\nimport React, { useState, useRef, useEffect } from \"react\";\nimport \"./App.css\";\nimport { get, set } from \"idb-keyval\";\nimport { Dropbox } from \"dropbox\";\nimport {\n  getAuthenticationUrl,\n  isAuthenticated,\n  getAccessTokenFromUrl\n} from \"./dropbox\";\n\nfunction uuidv4() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, function(c) {\n    var r = (Math.random() * 16) | 0,\n      v = c === \"x\" ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n\nlet gTasks: any;\n\ninterface Task {\n  id: string;\n  text: string;\n  done?: boolean;\n}\n\nfunction createTask(text: string) {\n  return {\n    id: uuidv4(),\n    text: text\n  };\n}\n\ninterface EditTaskProps {\n  task: Task;\n  onChange: (t: Task) => void;\n  onNext: () => void;\n  onNextOrCreate: () => void;\n  onPrev: () => void;\n  onDone: () => void;\n}\n\nfunction EditTask(props: EditTaskProps) {\n  const inpRef: any = useRef(null);\n  useEffect(() => {\n    inpRef.current.focus();\n  });\n  return (\n    <div className=\"row\">\n      <input\n        className={props.task.done ? \"done\" : \"\"}\n        ref={inpRef}\n        value={props.task.text}\n        onChange={(ev: any) => {\n          props.task.text = ev.target.value;\n          props.onChange(props.task);\n        }}\n        onKeyDown={(e: any) => {\n          if (e.key === \"Enter\" && e.ctrlKey) props.onDone();\n          else if (e.key === \"Enter\") {\n            props.onNextOrCreate();\n          } else if (e.key === \"ArrowUp\") {\n            props.onPrev();\n          } else if (e.key === \"ArrowDown\") {\n            props.onNext();\n          }\n\n          //e.key === \"Enter\" && onAdd();\n        }}\n      />\n    </div>\n  );\n}\n\nfunction Task(props: any) {\n  return (\n    <div className={\"row \" + (props.task.done ? \"done\" : \"\")}>\n      <div onClick={props.onActivate} className={props.task.done ? \"done\" : \"\"}>\n        {props.task.text}\n      </div>\n      <div onClick={props.onDelete}>x</div>\n    </div>\n  );\n}\n\nasync function getTasks(): Promise<Task[]> {\n  return get(\"tasks\") as any;\n}\n\nfunction Actions(props: any) {\n  return (\n    <div className=\"row\">\n      <div onClick={props.onUpload}>Upload</div>\n      <div onClick={props.onDownload}>Download</div>\n    </div>\n  );\n}\n\nfunction DropboxCmp(props: any) {\n  let [status, setStatus] = useState(\"-\");\n  const onPut = () => {\n    setStatus(\"-\");\n    //@ts-ignore\n    let dbx: any = new Dropbox({\n      accessToken:\n        \"_gazk0s4vNsAAAAAAAAHhyoNC4CMtgX-dfDZfRlWT1jnCDEeuUTA2bUTlBGZc-bd\"\n    });\n    dbx\n      .filesUpload({\n        contents: JSON.stringify(gTasks),\n        path: \"/tTask.json\",\n        mode: { \".tag\": \"overwrite\" }\n      })\n      .then((response: any) => {\n        setStatus(\"put ok\");\n      });\n  };\n  const onGet = () => {\n    //@ts-ignore\n    setStatus(\"-\");\n    let dbx: any = new Dropbox({\n      accessToken: getAccessTokenFromUrl()\n    });\n    dbx\n      .filesDownload({\n        path: \"/tTask.json\"\n      })\n      .then((response: any) => {\n        response.fileBlob.text().then((txt: string) => {\n          props.onGet(JSON.parse(txt));\n          setStatus(\"get ok\");\n        });\n      });\n  };\n  return (\n    <div className=\"row\">\n      <div>Dropbox:</div>\n      <div>Status: {status}</div>\n      <div>isauth:{isAuthenticated() ? \"yes\" : \"no\"}</div>\n      <div>\n        <a href={getAuthenticationUrl()}>Dropbox auth</a>\n      </div>\n      <div onClick={onPut}>Put</div>\n      <div onClick={onGet}>Get</div>\n    </div>\n  );\n}\n\nconst gtasks = getTasks();\n\nfunction download(filename: string, text: string) {\n  var pom = document.createElement(\"a\");\n  pom.setAttribute(\n    \"href\",\n    \"data:text/plain;charset=utf-8,\" + encodeURIComponent(text)\n  );\n  pom.setAttribute(\"download\", filename);\n\n  if (document.createEvent) {\n    var event = document.createEvent(\"MouseEvents\");\n    event.initEvent(\"click\", true, true);\n    pom.dispatchEvent(event);\n  } else {\n    pom.click();\n  }\n}\n\nconst App: React.FC = () => {\n  let [tasks, setTasks] = useState(undefined as Task[] | undefined);\n  const ts = (tasks || []) as Task[];\n  let [activeTaskId, setActiveTaskId] = useState(\n    undefined as undefined | string\n  );\n\n  if (tasks === undefined) {\n    gtasks.then((v: any) => {\n      if (!Array.isArray(v)) v = [createTask(\"\")];\n      setTasks(v);\n    });\n  }\n  gTasks = tasks;\n\n  const update = (t: any) => {\n    set(\"tasks\", t);\n    setTasks(t);\n  };\n  const onDownload = () => {\n    download(\"content.json\", JSON.stringify(tasks));\n  };\n  const onUpload = () => {\n    var input = document.createElement(\"input\");\n    input.type = \"file\";\n\n    input.onchange = (e: any) => {\n      var file = e.target.files[0];\n      var reader = new FileReader();\n      reader.readAsText(file); // this is reading as data url\n      reader.onload = (readerEvent: any) => {\n        update(JSON.parse(readerEvent.target.result));\n      };\n    };\n\n    input.click();\n  };\n\n  const move = (up: boolean, create: boolean) => {\n    let idx = 0;\n    for (; idx < ts.length; ++idx) {\n      if (ts[idx].id === activeTaskId) break;\n    }\n    if (up) {\n      if (idx > 0) setActiveTaskId(ts[idx - 1].id);\n    }\n    if (!up) {\n      if (idx < ts.length - 1) setActiveTaskId(ts[idx + 1].id);\n      else if (create) {\n        const nt = createTask(\"\");\n        update(ts.concat([nt]));\n        setActiveTaskId(nt.id);\n      }\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      tTask\n      <>\n        {ts.map(t =>\n          t.id === activeTaskId ? (\n            <EditTask\n              key={t.id}\n              task={t}\n              onChange={(t: Task) => {\n                update([...ts]);\n              }}\n              onNext={() => move(false, false)}\n              onPrev={() => move(true, false)}\n              onNextOrCreate={() => move(false, true)}\n              onDone={() => {\n                t.done = !t.done;\n                update([...ts]);\n              }}\n            />\n          ) : (\n            <Task\n              key={t.id}\n              task={t}\n              onActivate={() => setActiveTaskId(t.id)}\n              onDelete={() => {\n                update(ts.filter(tf => tf.id !== t.id));\n              }}\n            />\n          )\n        )}\n      </>\n      <Actions onDownload={onDownload} onUpload={onUpload} />\n      <DropboxCmp\n        onGet={(t: Task[]) => {\n          update(t);\n        }}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","//@ts-nocheck\r\n//@ts-ignore\r\nimport { Dropbox } from \"dropbox\";\r\n\r\nconst utils: any = {\r\n  parseQueryString: function(str: string) {\r\n    var ret = Object.create(null);\r\n\r\n    if (typeof str !== \"string\") {\r\n      return ret;\r\n    }\r\n\r\n    str = str.trim().replace(/^(\\?|#|&)/, \"\");\r\n\r\n    if (!str) {\r\n      return ret;\r\n    }\r\n\r\n    str.split(\"&\").forEach(function(param) {\r\n      var parts = param.replace(/\\+/g, \" \").split(\"=\");\r\n      // Firefox (pre 40) decodes `%3D` to `=`\r\n      // https://github.com/sindresorhus/query-string/pull/37\r\n      let key = parts.shift() as string;\r\n      let val: any = parts.length > 0 ? parts.join(\"=\") : undefined;\r\n\r\n      key = decodeURIComponent(key);\r\n\r\n      // missing `=` should be `null`:\r\n      // http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\r\n      val = val === undefined ? null : decodeURIComponent(val);\r\n\r\n      if (ret[key] === undefined) {\r\n        ret[key] = val;\r\n      } else if (Array.isArray(ret[key])) {\r\n        ret[key].push(val);\r\n      } else {\r\n        ret[key] = [ret[key], val];\r\n      }\r\n    });\r\n\r\n    return ret;\r\n  }\r\n};\r\n\r\nlet CLIENT_ID = \"x6r5q8bswp39z2z\";\r\nexport function getAuthenticationUrl() {\r\n  var dbx: any = new Dropbox({ clientId: CLIENT_ID });\r\n  return dbx.getAuthenticationUrl(window.location);\r\n}\r\n\r\n// Parses the url and gets the access token if it is in the urls hash\r\nexport function getAccessTokenFromUrl(): string {\r\n  return utils.parseQueryString(window.location.hash).access_token;\r\n}\r\n// If the user was just redirected from authenticating, the urls hash will\r\n// contain the access token.\r\nexport function isAuthenticated() {\r\n  return !!getAccessTokenFromUrl();\r\n}\r\n// Render a list of items to #files\r\n/*function renderItems(items:any) {\r\n  var filesContainer = document.getElementById(\"files\");\r\n  items.forEach(function(item) {\r\n    var li = document.createElement(\"li\");\r\n    li.innerHTML = item.name;\r\n    filesContainer.appendChild(li);\r\n  });\r\n}*/\r\n// This example keeps both the authenticate and non-authenticated setions\r\n// in the DOM and uses this function to show/hide the correct section.\r\n/*function showPageSection(elementId) {\r\n  document.getElementById(elementId).style.display = \"block\";\r\n}\r\n\r\nif (isAuthenticated()) {\r\n  showPageSection(\"authed-section\");\r\n  // Create an instance of Dropbox with the access token and use it to\r\n  // fetch and render the files in the users root directory.\r\n  var dbx = new Dropbox.Dropbox({ accessToken: getAccessTokenFromUrl() });\r\n  dbx\r\n    .filesListFolder({ path: \"\" })\r\n    .then(function(response) {\r\n      renderItems(response.entries);\r\n    })\r\n    .catch(function(error) {\r\n      console.error(error);\r\n    });\r\n} else {\r\n  import { Dropbox } from \"dropbox\";\r\n  var dbx = new Dropbox.Dropbox({ clientId: CLIENT_ID });\r\n  var authUrl = dbx.getAuthenticationUrl(\"http://localhost:3000/auth\");\r\n  document.getElementById(\"authlink\").href = authUrl;\r\n}\r\n*/\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}